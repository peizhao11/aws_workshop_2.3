AWSTemplateFormatVersion: '2010-09-09'
Description: Dynamic-web-application-with-recovery-part4
Parameters:
  VpcID:
    Description: The private Subnet ID in VPC that has connection to Equinix.
    Type: String
    AllowedPattern: vpc-[a-f0-9]{8}
  PublicSubnets:
    Description: The public subnets in the VPC
    Type: CommaDelimitedList
  AvailabilityZones:
    Description: The availability zones in the VPC
    Type: CommaDelimitedList
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: String
  InstanceType:
    Description: The Instance type which used to build stack.
    Type: String
  AMI:
    Description: The AMI id of the Platform image.
    Type: String
  ASGMaxSize:
    Description: AutoScaling max size
    Type: Number
    Default: 1
  ASGMinSize:
    Description: AutoScaling min size
    Type: Number
    Default: 1
  SSLCertArn:
    Description: ssl cert arn
    Type: String
  ResourceBucketName:
    Description: Name of the S3 bucket containing all rpm packages
    Type: String
  HostedZoneName:
    Description: The Route53 Zone in which to create records
    Type: String
  RecordName:
    Description: The name of the DNS record to create.
    Type: String

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: permit-cfn
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:*
              - cloudformation:*
              - iam:*
              - ec2:*
              - route53:*
              - s3:*
              - sts:AssumeRole
            Resource: '*'

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcID
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBHTPPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertArn
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'jenkins-target-group'
      Protocol: HTTP
      Port: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckPath: /login
      HealthCheckPort: traffic-port
      Matcher:
        HttpCode: 200-399
      VpcId: !Ref VpcID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For EC2 Instance
      VpcId: !Ref VpcID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  JenkinsASLaunchConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun: [Install]
        Install:
          files:
            /usr/local/bin/jenkins-restore:
              content: !Sub |
                #!/bin/bash -e
                USAGE="Usage: $0 S3_TARGET JENKINS_HOME"

                S3_TARGET=$1
                JENKINS_HOME=$2

                if [[ -z "`echo $S3_TARGET | grep '^s3://'`" ]]; then
                  echo -e $USAGE
                  exit 1
                fi

                if [[ $S3_TARGET == */ ]]; then
                  S3_TARGET=$S3_TARGET`aws s3 ls $S3_TARGET | tail -1 | awk '{print $NF}'`
                fi

                LOCAL_BACKUP=/tmp/`basename $S3_TARGET`
                if [[ -d "$LOCAL_BACKUP" ]]; then
                  rm -rf $LOCAL_BACKUP
                fi

                aws s3 cp $S3_TARGET $LOCAL_BACKUP

                if [[ -d "$JENKINS_HOME" ]]; then
                  rm -rf $JENKINS_HOME
                fi

                mkdir -p $JENKINS_HOME

                tar zxf $LOCAL_BACKUP -C $JENKINS_HOME
                rm -f $LOCAL_BACKUP
              mode: '000755'
              owner: root
              group: root
            /usr/local/bin/jenkins-backup:
              content: !Sub |
                #!/bin/bash -e
                USAGE="Usage: $0 JENKINS_HOME S3_TARGET"

                JENKINS_HOME=$1
                S3_TARGET=$2

                if [[ -z "`echo $S3_TARGET | grep '^s3://'`" || ! -d "$JENKINS_HOME" ]]; then
                  echo -e $USAGE
                  exit 1
                fi

                LOCAL_BACKUP=/tmp/`basename $S3_TARGET`

                tar -C $JENKINS_HOME -zcf $LOCAL_BACKUP . \
                  --exclude "config-history/" \
                  --exclude "config-history/*" \
                  --exclude "jobs/*/workspace*" \
                  --exclude "jobs/*/builds/*/archive" \
                  --exclude "plugins/*/*" \
                  --exclude "plugins/*.bak" \
                  --exclude "war" \
                  --exclude "cache"

                aws s3 cp $LOCAL_BACKUP $S3_TARGET
                rm -f $LOCAL_BACKUP
              mode: '000755'
              owner: root
              group: root
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMI
      SecurityGroups:
      - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          function error_exit
          {
            /opt/aws/bin/cfn-signal -e 1 -r $1 ${WaitHandle}
            exit 1
          }

          yum update -y

          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r JenkinsASLaunchConf  --region ${AWS::Region} --configsets InstallAndRun --role ${Role}|| error_exit 'Failed to run cfn-init'

          echo "*/5 * * * * /usr/local/bin/jenkins-backup /var/lib/jenkins s3://${ResourceBucketName}/jenkins-`date +\%Y\%m\%d\%H\%M.` >> /var/log/jenkins-backup.log 2>&1" >> /var/spool/cron/root

          /usr/local/bin/jenkins-restore s3://${ResourceBucketName}/ /var/lib/jenkins || true

          sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
          echo "enabled=1" >> /etc/yum.repos.d/jenkins.repo
          sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
          sudo yum -y update
          sudo yum install -y java-1.8.0-openjdk.x86_64 jenkins python-pip git
          sudo service jenkins restart
          /opt/aws/bin/cfn-signal -e 0 -r "Jenkins instance Stack Complete." '${WaitHandle}'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailabilityZones
      VPCZoneIdentifier: !Ref PublicSubnets
      Cooldown: 300
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref JenkinsASLaunchConf
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      TargetGroupARNs:
      - !Ref ALBTargetGroup

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 1000

  JenkinsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref RecordName
      HostedZoneName: !Ref HostedZoneName
      Type: CNAME
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID