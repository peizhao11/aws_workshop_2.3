Description: Dynamic-Web-Appliction-with-https-part3
Parameters:
  VpcID:
    Type: String
    AllowedPattern: vpc-[a-f0-9]{8}
    Description: Vpc ID
  PublicSubnets:
    Type: CommaDelimitedList
    Description: The public subnets which the ELB is hosted.
  AvailabilityZones:
    Type: CommaDelimitedList
    Description: The availability zones in the VPC
  KeyName:
    Type: String
    Description: The key name for ec2 secret key
  InstanceType:
    Type: String
    Description: The Instance type which used to build stack.
  ImageId:
    Type: String
    Description: The AMI id of the Platform image.
  SSLCertArn:
    Type: String
    Description: The Certificate Manager arn
  HostedZoneName:
    Type: String
    Description: Hosted Zone Name
  RecordName:
    Type: String
    Description: Record Name in Route53
  ASGMaxSize:
    Description: AutoScaling max size
    Type: Number
    Default: 1
  ASGMinSize:
    Description: AutoScaling min size
    Type: Number
    Default: 1

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: instance-policy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                - application-autoscaling:*
                - cloudformation:*
                - iam:*
                - route53:*
                - sts:AssumeRole
                Resource: "*"

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListenerForHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

  ALBListenerForHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      Certificates:
      - CertificateArn: !Ref SSLCertArn

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'jenkins-target-group'
      Protocol: HTTP
      Port: 8080
      TargetType: instance
      Matcher:
        HttpCode: 200-399
      VpcId: !Ref VpcID
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /login
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For EC2 Instance
      VpcId: !Ref VpcID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  LaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageId
        SecurityGroups:
          - !Ref EC2SecurityGroup
        IamInstanceProfile: !Ref InstanceProfile
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            # Install Jenkins
            sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
            echo "enabled=1" >> /etc/yum.repos.d/jenkins.repo
            sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
            sudo yum -y update
            sudo yum install -y java-1.8.0-openjdk.x86_64 jenkins python-pip git
            sudo service jenkins restart

            /opt/aws/bin/cfn-signal -e 0 -r "Jenkins instance Stack Complete." '${WaitHandle}'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailabilityZones
      LaunchConfigurationName: !Ref LaunchConfiguration
      Cooldown: 300
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      TargetGroupARNs:
      - !Ref ALBTargetGroup
      VPCZoneIdentifier: !Ref PublicSubnets

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 1500

  JenkinsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref RecordName
      HostedZoneName: !Ref HostedZoneName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
